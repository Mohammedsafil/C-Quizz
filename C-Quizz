#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Constants
#define MAX_USERS 10
#define MAX_QUIZZES 100
#define MAX_QUESTIONS 10
#define MAX_OPTIONS 4
#define MAX_NAME_LENGTH 50

// Structures
struct Question {
    char question[100];
    char options[MAX_OPTIONS][50];
    int correctOption;
};

struct User {
    char username[MAX_NAME_LENGTH];
    char password[MAX_NAME_LENGTH];
    char role[MAX_NAME_LENGTH];
};

struct Quiz {
    char quizName[MAX_NAME_LENGTH];
    struct Question questions[MAX_QUESTIONS];
    int numQuestions;
    int numParticipants;
    struct User participants[MAX_QUIZZES];
};

// Function Declarations
int loginUser(struct User users[], int numUsers, char username[], char password[], char role[]);
void signupUser(struct User users[], int* numUsers);
void createQuiz(struct Quiz quizzes[], int* numQuizzes, struct User* teacher);
void saveUserData(struct User users[], int numUsers);
void loadUserData(struct User users[], int* numUsers);
void saveQuizData(struct Quiz quizzes[], int numQuizzes);
void loadQuizData(struct Quiz quizzes[], int* numQuizzes);
void takeQuiz(struct Quiz quizzes[], int numQuizzes, struct User* student);
void displayResults(struct Quiz quizzes[], int numQuizzes, struct User* user);

// Main Function
int main() {
    struct User users[MAX_USERS];
    int numUsers = 0;

    struct Quiz quizzes[MAX_QUIZZES];
    int numQuizzes = 0;

    loadUserData(users, &numUsers);
    loadQuizData(quizzes, &numQuizzes);

    char choice;
    char username[MAX_NAME_LENGTH];
    char password[MAX_NAME_LENGTH];
    char role[MAX_NAME_LENGTH];

    printf("Welcome to the Quiz Management System\n");

    // Menu loop
    while (1) {
        printf("\n1. Login\n2. Signup\n3. Exit\nEnter your choice: ");
        scanf(" %c", &choice);

        switch (choice) {
            case '1':
                // Login
                printf("Enter username: ");
                scanf("%s", username);

                printf("Enter password: ");
                scanf("%s", password);

                printf("Enter role (student/teacher): ");
                scanf("%s", role);

                int index = loginUser(users, numUsers, username, password, role);

                if (index != -1) {
                    printf("Login successful! User: %s Role: %s\n", users[index].username, users[index].role);

                    if (strcmp(users[index].role, "teacher") == 0) {
                        createQuiz(quizzes, &numQuizzes, &users[index]);
                    } else if (strcmp(users[index].role, "student") == 0) {
                        takeQuiz(quizzes, numQuizzes, &users[index]);
                        displayResults(quizzes, numQuizzes, &users[index]);
                    }
                } else {
                    printf("Login failed. Incorrect username, password, or role.\n");
                }
                break;

            case '2':
                // Signup
                signupUser(users, &numUsers);
                break;

            case '3':
                // Exit
                saveUserData(users, numUsers);
                saveQuizData(quizzes, numQuizzes);
                printf("Exiting the program. Goodbye!\n");
                exit(0);

            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    }

    return 0;
}

// Function to authenticate users
int loginUser(struct User users[], int numUsers, char username[], char password[], char role[]) {
    for (int i = 0; i < numUsers; ++i) {
        if (strcmp(users[i].username, username) == 0 &&
            strcmp(users[i].password, password) == 0 &&
            strcmp(users[i].role, role) == 0) {
            return i; // Return the index of the authenticated user
        }
    }
    return -1; // Return -1 if authentication fails
}

// Function for user signup
void signupUser(struct User users[], int* numUsers) {
    if (*numUsers >= MAX_USERS) {
        printf("Cannot add more users. Maximum limit reached.\n");
        return;
    }

    printf("Enter username: ");
    scanf("%s", users[*numUsers].username);

    printf("Enter password: ");
    scanf("%s", users[*numUsers].password);

    printf("Enter role (student/teacher): ");
    scanf("%s", users[*numUsers].role);

    (*numUsers)++;

    printf("User signed up successfully!\n");
}

// Function to create a quiz
void createQuiz(struct Quiz quizzes[], int* numQuizzes, struct User* teacher) {
    printf("\nCreating a Quiz...\n");

    if (*numQuizzes >= MAX_QUIZZES) {
        printf("Cannot add more quizzes. Maximum limit reached.\n");
        return;
    }

    printf("Enter quiz name: ");
    scanf("%s", quizzes[*numQuizzes].quizName);

    printf("Enter the number of questions: ");
    scanf("%d", &quizzes[*numQuizzes].numQuestions);

    printf("\n");

    for (int i = 0; i < quizzes[*numQuizzes].numQuestions; ++i) {
        printf("Question %d:\n", i + 1);
        printf("Enter the question: ");
        scanf(" %[^\n]s", quizzes[*numQuizzes].questions[i].question);

        for (int j = 0; j < MAX_OPTIONS; ++j) {
            printf("Enter option %d: ", j + 1);
            scanf(" %[^\n]s", quizzes[*numQuizzes].questions[i].options[j]);
        }

        printf("Enter the correct option (1-%d): ", MAX_OPTIONS);
        scanf("%d", &quizzes[*numQuizzes].questions[i].correctOption);

        printf("\n");
    }

    quizzes[*numQuizzes].numParticipants = 0;
    quizzes[*numQuizzes].participants[0] = *teacher;
    quizzes[*numQuizzes].numParticipants++;

    (*numQuizzes)++;

    printf("Quiz created successfully!\n");
}

// Function to take a quiz
void takeQuiz(struct Quiz quizzes[], int numQuizzes, struct User* student) {
    printf("\nTaking a Quiz...\n");

    if (numQuizzes == 0) {
        printf("No quizzes available to take.\n");
        return;
    }

    // Display available quizzes
    printf("Available Quizzes:\n");
    for (int i = 0; i < numQuizzes; ++i) {
        printf("%d. %s\n", i + 1, quizzes[i].quizName);
    }

    int quizChoice;
    printf("Enter the number of the quiz you want to take: ");
    scanf("%d", &quizChoice);

    if (quizChoice < 1 || quizChoice > numQuizzes) {
        printf("Invalid quiz choice.\n");
        return;
    }

    struct Quiz* selectedQuiz = &quizzes[quizChoice - 1];

    // Check if the student has already participated in this quiz
    for (int i = 0; i < selectedQuiz->numParticipants; ++i) {
        if (strcmp(selectedQuiz->participants[i].username, student->username) == 0) {
            printf("You have already taken this quiz.\n");
            return;
        }
    }

    // Take the quiz
    printf("Taking Quiz: %s\n", selectedQuiz->quizName);

    int score = 0;

    for (int i = 0; i < selectedQuiz->numQuestions; ++i) {
        printf("\nQuestion %d: %s\n", i + 1, selectedQuiz->questions[i].question);
        printf("Options:\n");

        for (int j = 0; j < MAX_OPTIONS; ++j) {
            printf("%d. %s\n", j + 1, selectedQuiz->questions[i].options[j]);
        }

        int userChoice;
        printf("Your answer (1-%d): ", MAX_OPTIONS);
        scanf("%d", &userChoice);

        if (userChoice == selectedQuiz->questions[i].correctOption) {
            printf("Correct!\n");
            score++;
        } else {
            printf("Incorrect. The correct answer is Option %d.\n", selectedQuiz->questions[i].correctOption);
        }
    }

    // Record the participation
    selectedQuiz->participants[selectedQuiz->numParticipants] = *student;
    selectedQuiz->numParticipants++;

    printf("Quiz completed. Your score: %d/%d\n", score, selectedQuiz->numQuestions);
}

// Function to display quiz results
void displayResults(struct Quiz quizzes[], int numQuizzes, struct User* user) {
    printf("\nDisplaying Quiz Results...\n");

    if (numQuizzes == 0) {
        printf("No quizzes available.\n");
        return;
    }

    // Display available quizzes
    printf("Available Quizzes:\n");
    for (int i = 0; i < numQuizzes; ++i) {
        printf("%d. %s\n", i + 1, quizzes[i].quizName);
    }

    int quizChoice;
    printf("Enter the number of the quiz you want to check results for: ");
    scanf("%d", &quizChoice);

    if (quizChoice < 1 || quizChoice > numQuizzes) {
        printf("Invalid quiz choice.\n");
        return;
    }

    struct Quiz* selectedQuiz = &quizzes[quizChoice - 1];

    // Check if the user has participated in this quiz
    int participantIndex = -1;

    for (int i = 0; i < selectedQuiz->numParticipants; ++i) {
        if (strcmp(selectedQuiz->participants[i].username, user->username) == 0) {
            participantIndex = i;
            break;
        }
    }

    if (participantIndex == -1) {
        printf("You have not participated in this quiz.\n");
        return;
    }

    // Display results
    printf("Results for Quiz: %s\n", selectedQuiz->quizName);

    for (int i = 0; i < selectedQuiz->numQuestions; ++i) {
        printf("\nQuestion %d: %s\n", i + 1, selectedQuiz->questions[i].question);
        printf("Your answer: Option %d\n", selectedQuiz->questions[i].correctOption);
    }

    printf("\nQuiz completed. Your score: %d/%d\n", selectedQuiz->numQuestions, selectedQuiz->numQuestions);
}

// Function to save user data to a file
void saveUserData(struct User users[], int numUsers) {
    FILE* file = fopen("users.txt", "w");
    if (file == NULL) {
        printf("Error opening users.txt for writing.\n");
        exit(1);
    }

    for (int i = 0; i < numUsers; ++i) {
        fprintf(file, "%s %s %s\n", users[i].username, users[i].password, users[i].role);
    }

    fclose(file);
}

// Function to load user data from a file
void loadUserData(struct User users[], int* numUsers) {
    FILE* file = fopen("users.txt", "r");
    if (file == NULL) {
        printf("No user data found. Creating a new file.\n");
        return;
    }

    while (fscanf(file, "%s %s %s", users[*numUsers].username, users[*numUsers].password, users[*numUsers].role) == 3) {
        (*numUsers)++;
        if (*numUsers >= MAX_USERS) {
            printf("Maximum user limit reached.\n");
            break;
        }
    }

    fclose(file);
}

// Function to save quiz data to a file
void saveQuizData(struct Quiz quizzes[], int numQuizzes) {
    FILE* file = fopen("quizzes.txt", "w");
    if (file == NULL) {
        printf("Error opening quizzes.txt for writing.\n");
        exit(1);
    }

    for (int i = 0; i < numQuizzes; ++i) {
        fprintf(file, "%s %d %d\n", quizzes[i].quizName, quizzes[i].numQuestions, quizzes[i].numParticipants);

        for (int j = 0; j < quizzes[i].numQuestions; ++j) {
            fprintf(file, "%s\n", quizzes[i].questions[j].question);

            for (int k = 0; k < MAX_OPTIONS; ++k) {
                fprintf(file, "%s\n", quizzes[i].questions[j].options[k]);
            }

            fprintf(file, "%d\n", quizzes[i].questions[j].correctOption);
        }

        for (int j = 0; j < quizzes[i].numParticipants; ++j) {
            fprintf(file, "%s\n", quizzes[i].participants[j].username);
        }
    }

    fclose(file);
}

// Function to load quiz data from a file
void loadQuizData(struct Quiz quizzes[], int* numQuizzes) {
    FILE* file = fopen("quizzes.txt", "r");
    if (file == NULL) {
        printf("No quiz data found. Creating a new file.\n");
        return;
    }

    while (fscanf(file, "%s %d %d", quizzes[*numQuizzes].quizName, &quizzes[*numQuizzes].numQuestions,
                  &quizzes[*numQuizzes].numParticipants) == 3) {
        for (int j = 0; j < quizzes[*numQuizzes].numQuestions; ++j) {
            fscanf(file, "%s", quizzes[*numQuizzes].questions[j].question);

            for (int k = 0; k < MAX_OPTIONS; ++k) {
                fscanf(file, "%s", quizzes[*numQuizzes].questions[j].options[k]);
            }

            fscanf(file, "%d", &quizzes[*numQuizzes].questions[j].correctOption);
        }

        for (int j = 0; j < quizzes[*numQuizzes].numParticipants; ++j) {
            fscanf(file, "%s", quizzes[*numQuizzes].participants[j].username);
        }

        (*numQuizzes)++;
        if (*numQuizzes >= MAX_QUIZZES) {
            printf("Maximum quiz limit reached.\n");
            break;
        }
    }

    fclose(file);
}
